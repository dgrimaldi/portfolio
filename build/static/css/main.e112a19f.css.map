{"version":3,"file":"static/css/main.e112a19f.css","mappings":"AASA,WAEE,aADA,sBAEA,mBAMF,aACE,cAIF,QACE,wBAGF,gBAEE,qBADA,sBACA,CAGF,WAGE,oBADA,YADA,OAEA,CAIF,SACE,kBAKF,sBACE,eAcF,yBAEE,qBAEA,MACE,eAIJ,yBAEE,qBAIF,yBAIE,eACA,iBACA,cACA,iBACA,iBCnFF,KAKE,YAFA,cACA,eAHA,eACA,UAGA","sources":["components/Layout/style.scss","features/CircularPacking/style.scss"],"sourcesContent":["// ability to alter its itemsâ€™ width/height (and order) to best fill the available space\n// (mostly to accommodate to all kind of display devices and screen sizes).\n// A flex container expands items to fill available free space or shrinks them to prevent overflow.\n\n//Most importantly, the flexbox layout is direction-agnostic as opposed to the regular layouts\n// (block which is vertically-based and inline which is horizontally-based).\n// While those work well for pages, they lack flexibility (no pun intended) to support large or complex applications\n// (especially when it comes to orientation changing, resizing, stretching, shrinking, etc.).\n\n.container{\n  flex-direction: column;\n  display: flex;\n  flex-flow: row wrap; // This is a shorthand for the flex-direction and flex-wrap properties\n  // flex-direction: row | row-reverse | column | column-reverse // the main-axis of items in the container\n  // flex-wrap: nowrap | wrap | wrap-reverse // wrap --> flex items will wrap onto multiple lines, from top to bottom\n}\n\n/* We tell all items to be 100% width, via flex-basis */\n.container > * {\n  flex: 1 100%;\n}\n\n/* We tell header to be 100% width, via flex-basis */\n.header {\n  flex: 1 100% !important;\n}\n\n.container-frog{\n  justify-content: center;\n  align-content: center // flex-start | flex-end\n}\n\n.item-frog{\n  order: 2;       // controls the order in which they appear in the flex container.\n  flex-grow: 4;   // defines the ability for a flex item to grow if necessary.\n  align-self: flex-end // is the same as align-content\n}\n\n\n.content {\n  margin: 15em 0 5em 0;\n}\n.content-0 {\n  margin: 0 0 5em 0;\n}\n.content-1 {\n  margin: 0 0 5em 0;\n}\n\n\n/* We rely on source order for mobile-first approach\n * in this case:\n * 1. header\n * 2. article\n * 3. aside 1\n * 4. aside 2\n * 5. footer\n */\n\n/* Medium screens */\n@media all and (min-width: 600px) {\n  /* We tell both sidebars to share a row */\n  .aside { flex: 0 auto; }\n\n  .main {\n    padding: 0 5em;\n  }\n}\n\n@media all and (max-width: 600px) {\n  /* We tell both sidebars to share a row */\n  .aside { display: none }\n}\n\n/* Large screens */\n@media all and (min-width: 800px) {\n  /* We invert order of first sidebar and main\n   * And tell the main element to take twice as much width as the other two sidebars\n   */\n  .main { flex: 3 0; }\n  .aside-1 { order: 1; }\n  .main    { order: 2; }\n  .aside-2 { order: 3; }\n  .footer  { order: 4; }\n}\n\n\n\n",".img {\n  max-width: 100%;\n  width: 100%;\n  margin-left: 0;\n  margin-right: 0;\n  height: 25em;\n}"],"names":[],"sourceRoot":""}